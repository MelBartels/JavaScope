import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.*;
import javax.swing.colorchooser.*;
import javax.swing.filechooser.*;
import javax.accessibility.*;
import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.util.*;
import java.io.*;
import java.text.*;
import java.net.*;

/**
 *
 * @author  MBartels
 *
 * Sidereal Technology velocity calculator
 */
public class JFrameSiTechVelCalc extends javax.swing.JFrame {

    // Variables declaration - do not modify
    private javax.swing.ButtonGroup buttonGroupSpeed;
    private javax.swing.JLabel jLabelCountsPerRevolution;
    private javax.swing.JLabel jLabelSpeed;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelSiTechVelCalc;
    private javax.swing.JRadioButton jRadioButtonArcminSec;
    private javax.swing.JRadioButton jRadioButtonArcsecSec;
    private javax.swing.JRadioButton jRadioButtonDegSec;
    private javax.swing.JRadioButton jRadioButtonSidRate;
    private javax.swing.JTextField jTextFieldCalculatedVelocity;
    private javax.swing.JTextField jTextFieldCountsPerRevolution;
    private javax.swing.JTextField jTextFieldSpeed;
    private javax.swing.JToggleButton jToggleButtonCalcVelocity;
    // End of variables declaration

    /** Creates new form JFrame */
    public JFrameSiTechVelCalc() {
        super("SiTech Velocity Calculator");
        JFrame.setDefaultLookAndFeelDecorated(true);
        JDialog.setDefaultLookAndFeelDecorated(true);
        initComponents();
        screenPlacement.getInstance().center(this);

        jRadioButtonDegSec.setSelected(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        buttonGroupSpeed = new javax.swing.ButtonGroup();
        jPanelSiTechVelCalc = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jLabelCountsPerRevolution = new javax.swing.JLabel();
        jTextFieldCountsPerRevolution = new javax.swing.JTextField();
        jLabelSpeed = new javax.swing.JLabel();
        jTextFieldSpeed = new javax.swing.JTextField();
        jRadioButtonArcminSec = new javax.swing.JRadioButton();
        jRadioButtonArcsecSec = new javax.swing.JRadioButton();
        jRadioButtonDegSec = new javax.swing.JRadioButton();
        jTextFieldCalculatedVelocity = new javax.swing.JTextField();
        jToggleButtonCalcVelocity = new javax.swing.JToggleButton();
        jRadioButtonSidRate = new javax.swing.JRadioButton();

        getContentPane().setLayout(new AbsoluteLayout());

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanelSiTechVelCalc.setLayout(new AbsoluteLayout());

        jPanelSiTechVelCalc.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabelTitle.setText("Sidereal Technology Controller Velocity Calculator");
        jPanelSiTechVelCalc.add(jLabelTitle, new AbsoluteConstraints(60, 20, -1, -1));

        jLabelCountsPerRevolution.setText("counts per rev.");
        jPanelSiTechVelCalc.add(jLabelCountsPerRevolution, new AbsoluteConstraints(50, 60, -1, -1));

        jTextFieldCountsPerRevolution.setToolTipText("counts or ticks of the motor that encompases a complete revolution of the telescope axis");
        jPanelSiTechVelCalc.add(jTextFieldCountsPerRevolution, new AbsoluteConstraints(140, 60, 90, -1));

        jLabelSpeed.setText("speed");
        jPanelSiTechVelCalc.add(jLabelSpeed, new AbsoluteConstraints(50, 90, -1, -1));

        jTextFieldSpeed.setToolTipText("counts or ticks of the motor that encompases a complete revolution of the telescope axis");
        jPanelSiTechVelCalc.add(jTextFieldSpeed, new AbsoluteConstraints(140, 90, 90, -1));

        jRadioButtonArcminSec.setText("arcmin/sec");
        buttonGroupSpeed.add(jRadioButtonArcminSec);
        jPanelSiTechVelCalc.add(jRadioButtonArcminSec, new AbsoluteConstraints(260, 70, -1, -1));

        jRadioButtonArcsecSec.setText("arcsec/sec");
        buttonGroupSpeed.add(jRadioButtonArcsecSec);
        jPanelSiTechVelCalc.add(jRadioButtonArcsecSec, new AbsoluteConstraints(260, 90, -1, -1));

        jRadioButtonDegSec.setText("deg/sec");
        buttonGroupSpeed.add(jRadioButtonDegSec);
        jPanelSiTechVelCalc.add(jRadioButtonDegSec, new AbsoluteConstraints(260, 50, -1, -1));

        jTextFieldCalculatedVelocity.setEditable(false);
        jTextFieldCalculatedVelocity.setToolTipText("counts or ticks of the motor that encompases a complete revolution of the telescope axis");
        jPanelSiTechVelCalc.add(jTextFieldCalculatedVelocity, new AbsoluteConstraints(210, 150, 90, -1));

        jToggleButtonCalcVelocity.setText("calculate velocity");
        jToggleButtonCalcVelocity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonCalcVelocityActionPerformed(evt);
            }
        });

        jPanelSiTechVelCalc.add(jToggleButtonCalcVelocity, new AbsoluteConstraints(60, 150, -1, -1));

        jRadioButtonSidRate.setText("sidereal rate");
        buttonGroupSpeed.add(jRadioButtonSidRate);
        jPanelSiTechVelCalc.add(jRadioButtonSidRate, new AbsoluteConstraints(260, 110, -1, -1));

        getContentPane().add(jPanelSiTechVelCalc, new AbsoluteConstraints(0, 0, 370, 200));

        pack();
    }

    private void jToggleButtonCalcVelocityActionPerformed(java.awt.event.ActionEvent evt) {
        final double SITECH_RATE = 33.554432;
        double value = 0.;
        double countsPerRev;
        double speed;
        double calculatedVel = 0.;

        jToggleButtonCalcVelocity.setSelected(false);

        try {
            value = Double.parseDouble(jTextFieldCountsPerRevolution.getText());
            countsPerRev = value;
            if (jRadioButtonSidRate.isSelected()) {
                calculatedVel = countsPerRev * 15. * units.ARCSEC_TO_REV * units.SID_RATE * SITECH_RATE;
                displayCalculatedVel(calculatedVel);
            }
            else {
                value = Double.parseDouble(jTextFieldSpeed.getText());
                speed = value;

                if (jRadioButtonDegSec.isSelected())
                    calculatedVel = countsPerRev * speed * SITECH_RATE / 360.;
                else if (jRadioButtonArcminSec.isSelected())
                    calculatedVel = countsPerRev * speed * SITECH_RATE / 21600.;
                else if (jRadioButtonArcsecSec.isSelected())
                    calculatedVel = countsPerRev * speed * SITECH_RATE / 1296000.;

                displayCalculatedVel(calculatedVel);
            }
        }
        catch (NumberFormatException nfe) {
            console.errOut("invalid number in JFrameSiTechVelCalc.jToggleButtonCalcVelocityActionPerformed(): " + value);
        }
    }

    private void displayCalculatedVel(double calculatedVel) {
        jTextFieldCalculatedVelocity.setText(eString.longToStringNoGroupingNoLeadingZeros((long)calculatedVel, 10));
    }


    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        setVisible(false);
    }
}

